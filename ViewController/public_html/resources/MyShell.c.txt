#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

pid_t my_fork() ;
int process_args(char*, char**) ;
int separate_commands(char *, char**);
int check_if_piped(char *input);
int execute_piped_command(char *cmd, char **args_list);

/**
This program acts as a shell and executes simple commands.
It relies on the PATH env variable to search the program.
To exit the program press Ctrl + C
**/
	
int main(int argc, char *argv[]){

	pid_t pid ;
	char line[255] ;
	char *commands[255];
	char *arg_list[255];
	int status, i = 0;

	while(1){ // non-terminating loop
		printf("myshell:>") ;
		fgets(line, BUFSIZ, stdin) ;
		
		if(line[strlen(line)-1] == '\n'){
			// remove the new line character from end
			line[strlen(line)-1] = '\0' ;
		}
		
		//check if the user is trying to use pipes
		if (!check_if_piped(line)) {
			//separate the commands entered by user
			int cmds_read = separate_commands(line, commands);
		
			//execute all the commands read
			for(i = 0; i < cmds_read; i++) {
			
				//each command is separated into the name followed by any options
				int background = process_args(commands[i], arg_list) ;
			
				//create a child to execute the command
				pid = my_fork() ;

				if(pid == -1){
					perror("fork failed\n") ;
					exit(1) ;
				}
				else if (pid == 0){ // The child Process

					if(execvp(arg_list[0], arg_list)==-1){

						int j = 0 ;
						while(arg_list[j] != NULL){
							printf("%d:\t%s\n", j, arg_list[j]) ;
							++j ;
						}
						perror("Child process could not exec\n") ;
						exit(22) ;
					}
				} 
				else if (!background){ /*The parent Process only waits for child
									if child is not a background process*/
					waitpid(pid, &status, WUNTRACED);
				}
			}//for loop ends
		}
		//if the user is trying to use pipes
		else {
			
			pid_t pid2 = fork();
			
			if (pid2 == 0) {
				execute_piped_command(line, arg_list);
			}
			else {
				wait(&status);
			}
		}
	}/* while loop ends */ 
} //main() ends

/*
separate_commands takes the line the user entered and breaks it up into individual
commands to be used in exec. strtok is used with ';' as the delimiter to break
up each command. Once strtok is finished a NULL pointer is placed at the end to 
indicate there are no more arguments and the number of commands are returned as
an integer value.
*/
int separate_commands(char *line, char **commands) {
	
	int i = 0;
	char *token;
	token = strtok(line, ";");
	
	while (token != NULL) {
		commands[i] = (char *)malloc(255);
		strcpy(commands[i], token);
		token = strtok(NULL, ";");
		++i;
	}
	commands[i] = NULL;
	return i;
}
/*
process_args takes the individual commands entered by user and separates the name
of the command from the arguments. the name of the command will be the first value
in args_list follwed by any options the user specified. once strtok has finished 
the last option is checked to see if it is an '&' which will specify that command will be run as a background process. A 1 will be returned if it is a background
process, otherwise a 0 will be returned.
*/
int process_args(char *line, char **args_list){

	int i = 0 ;
	char *token ;
	token = strtok(line, " ");

	while(token != NULL){
		args_list[i] = (char *)malloc(255) ;
		strcpy(args_list[i], token) ;
		token = strtok(NULL, " ");
		++i ;	
	}
	args_list[i] = NULL ;
	
	//if there were spaces between & and the argument replace with null
	if (strcmp(args_list[i-1], "&") == 0) {
		args_list[i-1] = NULL;
		return 1;
	}
	
	int j = 0;
	
	//if there were no spaces between & and the argument
	//search the entire argument for an '&' char
	while (args_list[i-1][j] != '&' && j < strlen(args_list[i-1])) {
		j++;
	}
	
	/*if & is found in the string make it a null char*/
	if (args_list[i-1][j] == '&') {
	
		args_list[i-1][j] = '\0';
		
		//return 1 to indicate a background process will occur
		return 1;
	}
	
	//otherwise return 0 to indicate a forground process will occur
	else 
		return 0;
}

int check_if_piped(char *input) {
	int i = 0;
	while (input[i] != '\0') {
		//if the pipe char is found exit and return 1
		if (input[i] == '|') {
			return 1;
		}
		i++;
	}
	//if the string was searched and no pipe char was found return 0
	return 0;
}
int execute_piped_command(char *cmd, char **args_list) {

	int i = 0;
	int fd[2];
	
	char *token, prog1[256], prog2[256] ;
	token = strtok(cmd, "|") ;
	strcpy(prog1, token) ;
	token = strtok(NULL, "|") ;
	strcpy(prog2, token) ;
	
	pipe(fd);		//create a pipe
	
	if (fork() > 0) {
		close(fd[0]);	//close the read end
		dup2(fd[1],1);	//change stdout to write end of pipe
		process_args(prog1, args_list);
		execvp(args_list[0], args_list);	//execute the first command
	}
	else {
		close(fd[1]);	//close the write end
		dup2(fd[0],0);	//change stdin to read end of pipe
		process_args(prog2, args_list);
		execvp(args_list[0], args_list); 
	}
	return -1;
}

pid_t my_fork(){
	
	static int count = 0 ;
	count++ ;
	if(count <= 20){
		return(fork()) ;
	}else{
		return -1 ;
	}
}
